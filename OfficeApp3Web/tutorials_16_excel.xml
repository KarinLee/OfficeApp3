<?xml version="1.0" encoding="utf-8"?>
<content xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <scenario title="Create a Range with Data">
        <tasks>
            <task title="Step 1 of 2. Create a range with data" id="createRangeWithData">
                <code id="createRangeWithData">
                  <![CDATA[
// Run a batch operation against the Excel object model
Excel.run(function (ctx) {

	// Create a proxy object for the active worksheet
	var sheet = ctx.workbook.worksheets.getActiveWorksheet();

	//Queue commands to set the report title in the worksheet
	sheet.getRange("A1").values = "Quarterly Sales Report";
	sheet.getRange("A1").format.font.name = "Century";
	sheet.getRange("A1").format.font.size = 26;

	//Create an array containing sample data
	var values = [["Product", "Qtr1", "Qtr2", "Qtr3", "Qtr4"],
					["Frames", 5000, 7000, 6544, 4377],
					["Saddles", 400, 323, 276, 651],
					["Brake levers", 12000, 8766, 8456, 9812],
					["Chains", 1550, 1088, 692, 853],
					["Mirrors", 225, 600, 923, 544],
					["Spokes", 6005, 7634, 4589, 8765]];

	//Queue a command to write the sample data to the specified range
	//in the worksheet and bold the header row
	var range = sheet.getRange("A2:E8");
	range.values = values;
	sheet.getRange("A2:E2").format.font.bold = true;	

	//Run the queued-up commands, and return a promise to indicate task completion
	return ctx.sync();
  })
	.then(function () {
		console.log("Success! Range created. Select the arrow button to see how to remove the range data and format.");
	})
  .catch(function (error) {
		// Always be sure to catch any accumulated errors that bubble up from the Excel.run execution
		console.log("Error: " + error);		
});

        ]]></code>
            </task>

          <task title="Step 2 of 2. Remove the data and format in the range" id="removeDataAndFormat">
            <code id="removeDataAndFormat">
              <![CDATA[
Excel.run(function (ctx) { 
  // Create a proxy object for the active worksheet
	var sheet = ctx.workbook.worksheets.getActiveWorksheet();
  var range = sheet.getRange("A1:E8");   
  range.clear();
  return ctx.sync(); 
  })
  .then(function () {
		console.log("Success! Removed range data and format.");
	})
  .catch(function(error) {
    console.log("Error: " + error);
});

        ]]>
            </code>
          </task>
        </tasks>
    </scenario>
  <scenario title="Create a Table with Data">
    <tasks>
      <task title="Step 1 of 2. Create a table with data" id="1">
        <code id="createATable">
          <![CDATA[
// Create a table
Excel.run(function (ctx) { 
	  var sheet = ctx.workbook.worksheets.getActiveWorksheet();
	  var expenseTable = sheet.tables.add('N6:P6', true);
	  expenseTable.name = 'expenseTable';
	  expenseTable.getHeaderRowRange().values = [['Description','Cost','Category']];
	  var tableRows = expenseTable.rows;
	  tableRows.add(null,[['Rent','$600','Housing']]);
      tableRows.add(null, [["Movie Club", "$75", "Entertainment"]]);
	  tableRows.add(null, [["Food", "$450", "Food"]]);
	  tableRows.add(null, [["Car", "$150", "Transportation"]]);
	  tableRows.add(null, [["Tuition", "$800", "School costs"]]);
	  tableRows.add(null, [["Books", "$150", "School costs"]]);
	  tableRows.add(null, [["Gift", "$100", "Other"]]);
	  tableRows.add(null, [["Loan", "$250", "Loans/Payments"]]);
    
    return ctx.sync().then(function() {
        console.log("Success! My monthly expense table created! Select the arrow button to see how to remove the table.");
    })
    .catch(function (error) {
        console.log(JSON.stringify(error));
    });
});

        ]]>
        </code>
      </task>
      <task title="Step 2 of 2. Remove the data and format in the table" id="removeDataAndFormat">
        <code id="removeDataAndFormat">
          <![CDATA[
Excel.run(function (ctx) { 
    var tableName = 'expenseTable';
    var table = ctx.workbook.tables.getItem(tableName);
    table.delete();
    return ctx.sync(); 
    })
    .then(function () {
		console.log("Success! Removed table.");
	  })
    .catch(function(error) {
      console.log("Error: " + error);      
});

        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
  <scenario title="Create and Read a Chart">
    <tasks>
      <task title="Step 1 of 3. Create data source" id="createDataSource">
        <code id="createDataSource">
          <![CDATA[
// Create a range to be the data source of the chart
Excel.run(function (ctx) {
    var sheet = ctx.workbook.worksheets.getActiveWorksheet();

    var categoriesRange = sheet.getRange("A2:A5");
    categoriesRange.values = [
        ["Category 1"],
        ["Category 2"],
        ["Category 3"],
        ["Category 4"]
    ];

    var seriesRange = sheet.getRange("B1:D1");
    seriesRange.values = [
        ["Series 1", "Series 2", "Series 3", ]
    ];

    var dataRange = sheet.getRange("B2:D5");
    dataRange.values = [
        [2, 8, 7],
        [15, 11, 13],
        [1, 9, 7],
        [14, 14, 8]
    ];

    return ctx.sync()
        .then(function () {
            console.log("Success! Select the arrow button to move on.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                console.log("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});

        ]]>
        </code>
      </task>
      <task title="Step 2 of 3. Create chart" id="createChart">
        <code id="createChart">
          <![CDATA[
// Create a column clustered chart named Chart1
Excel.run(function (ctx) {
    var chartsource = ctx.workbook.worksheets.getActiveWorksheet().getRange("A1:D5");
    var chart = ctx.workbook.worksheets.getActiveWorksheet().charts.add("ColumnClustered", chartsource, Excel.ChartSeriesBy.auto);
    chart.name = "Chart1";
    chart.load("name");

    return ctx.sync()
        .then(function () {
            console.log("Success! " + chart.name + " was added. Select the arrow button to move on.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                console.log("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});


        ]]>
        </code>
      </task>
      <task title="Step 3 of 3. Read the chart name" id="readChartName">
        <code id="readChartName">
          <![CDATA[
// Read back the name of the chart added in the previous step.
Excel.run(function (ctx) {
    var chart = ctx.workbook.worksheets.getActiveWorksheet().charts.getItem("Chart1");
    chart.load("name");

    return ctx.sync()
        .then(function () {
            console.log("Success! " + chart.name + " is the name of the chart added in the previous step.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                console.log("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});

        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
  <scenario title="Format a Table">
    <tasks>
      <task title="Step 1 of 3. Create a table with data" id="createTable">
        <code id="createTable">
          <![CDATA[
// Create a table
Excel.run(function (ctx) { 
	  var sheet = ctx.workbook.worksheets.getActiveWorksheet();
	  var expenseTable = sheet.tables.add('N6:P6', true);
	  expenseTable.name = 'expenseTable';
	  expenseTable.getHeaderRowRange().values = [['Description','Cost','Category']];
	  var tableRows = expenseTable.rows;
	  tableRows.add(null,[['Rent','$600','Housing']]);
      tableRows.add(null, [["Movie Club", "$75", "Entertainment"]]);
	  tableRows.add(null, [["Food", "$450", "Food"]]);
	  tableRows.add(null, [["Car", "$150", "Transportation"]]);
	  tableRows.add(null, [["Tuition", "$800", "School costs"]]);
	  tableRows.add(null, [["Books", "$150", "School costs"]]);
	  tableRows.add(null, [["Gift", "$100", "Other"]]);
	  tableRows.add(null, [["Loan", "$250", "Loans/Payments"]]);
    
    return ctx.sync().then(function() {
        console.log("Success! My monthly expense table created! Select the arrow button to see how to format the table.");
    })
    .catch(function (error) {
        console.log(JSON.stringify(error));
    });
});
        ]]>
        </code>
      </task>
      <task title="Step 2 of 3. Get and format the header range of the table" id="formatTableHeader">
        <code id="formatTableHeader">
          <![CDATA[
Excel.run(function (ctx) { 
    var tableName = 'expenseTable';
    var table = ctx.workbook.tables.getItem(tableName);
    var tableHeaderRange = table.getHeaderRowRange();
    tableHeaderRange.load('address');
    return ctx.sync().then(function() {
      tableHeaderRange.format.font.size = 15;
      tableHeaderRange.format.font.color = "white";
      tableHeaderRange.format.font.name = "Rockwell";		
      tableHeaderRange.format.fill.color = "blue";	
      tableHeaderRange.format.borders.getItem("InsideHorizontal").style = "Continuous";
      tableHeaderRange.format.borders.getItem('EdgeBottom').style = 'Continuous';
      tableHeaderRange.format.borders.getItem('EdgeTop').style = 'Continuous';
			
      return ctx.sync().then(function() {      
          console.log("Success! Formatted table header at " +tableHeaderRange.address + ". Select the arrow button to see how to format the table data.");
        });
    });
}).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
});
        ]]>
        </code>
      </task>
      <task title="Step 3 of 3. Get and format the data body of the table" id="formatTableData">
        <code id="formatTableData">
          <![CDATA[
Excel.run(function (ctx) { 
    var tableName = 'expenseTable';
    var table = ctx.workbook.tables.getItem(tableName);
    var tableDataRange = table.getDataBodyRange();
    tableDataRange.load('address')
    return ctx.sync().then(function() {
      tableDataRange.format.font.size = 12;
      tableDataRange.format.font.color = "black";
      tableDataRange.format.font.name = "Rockwell";			
      tableDataRange.format.borders.getItem("InsideHorizontal").style = "Continuous";
      tableDataRange.format.borders.getItem('EdgeBottom').style = 'Continuous';
      tableDataRange.format.borders.getItem('EdgeTop').style = 'Continuous';
			
      return ctx.sync().then(function() {      
          console.log("Success! Formatted table data at " +tableDataRange.address);
        });
    });
}).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
});
        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
  <scenario title="Write and Read a Worksheet">
    <tasks>
      <task title="Step 1 of 2. Add a new worksheet" id="addNewWorksheet">
        <code id="addNewWorksheet">
          <![CDATA[
// Add a new worksheet named MyWorksheet.
Excel.run(function (ctx) {
    var myWorksheet = ctx.workbook.worksheets.add("MyWorksheet");
    myWorksheet.load("name");

    return ctx.sync()
        .then(function () {
            console.log("Success! " + myWorksheet.name + " was added. Select the arrow button to move on.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                console.log("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});
        ]]>
        </code>
      </task>
      <task title="Step 2 of 2. Read the index of the worksheet" id="readNameofIndex">
        <code id="readNameofIndex">
          <![CDATA[
// Read the index of the worksheet added in previous step
Excel.run(function (ctx) {
    var myWorksheet = ctx.workbook.worksheets.getItem("MyWorksheet");
    myWorksheet.load("position");

    return ctx.sync()
        .then(function () {
            console.log("Success! " + myWorksheet.position + " is position (zero based) of the worksheet added in the previous step.");
        })
        .catch(function (error) {
            if (error instanceof OfficeExtension.Error) {
                console.log("Action failed with error: " + JSON.stringify(error.debugInfo));
            }
        });
});


        ]]>
        </code>
      </task>
    </tasks>
  </scenario>
  <scenario title="Get Used Range">
    <tasks>
      <task title="Step 1 of 2. Get used range of a sheet" id="getUsedRange">
        <code id="getUsedRange">
          <![CDATA[
Excel.run(function (ctx) {
  // Create a proxy object for the active worksheet
  var sheet = ctx.workbook.worksheets.getActiveWorksheet();  
  var rangeUR = sheet.getUsedRange();
  rangeUR.load('address');
  return ctx.sync()
     .then(function () {
       console.log(rangeUR.address);
      })
     .catch(function (error) {
         if (error instanceof OfficeExtension.Error) {
             console.log("Action failed with error: " + JSON.stringify(error.debugInfo));
         }
     });
});

        ]]>
        </code>
      </task>
      <task title="Step 2 of 2. Clear the used range" id="clearUsedRange">
          <code id="clearUsedRange">
            <![CDATA[
Excel.run(function (ctx) {
  // Create a proxy object for the active worksheet
  var sheet = ctx.workbook.worksheets.getActiveWorksheet();  
  sheet.getUsedRange().clear();
  return ctx.sync()
     .then(function () {
       console.log("Success! Used range cleared.");
      })
     .catch(function (error) {
         if (error instanceof OfficeExtension.Error) {
             console.log("Action failed with error: " + JSON.stringify(error.debugInfo));
         }
     });
});

        ]]>
          </code>
        </task>
      </tasks>
  </scenario>
</content>